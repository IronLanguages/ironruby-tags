fails:Array#pack raises an ArgumentError with ('%')
fails:Array#pack raises an ArgumentError on empty array
fails:Array#pack skips everything till the end of schema string with ('#')
fails:Array#pack skips everything till the end of schema line with ('#')
fails:Array#pack returns packed bit-string descending order with ('B')
fails:Array#pack uses char codes to determine if bit is set or not with ('B')
fails:Array#pack conversion edge case: all zeros with ('B')
fails:Array#pack conversion edge case: all ones with ('B')
fails:Array#pack conversion edge case: left one with ('B')
fails:Array#pack conversion edge case: right one with ('B')
fails:Array#pack conversion edge case: edge sequences not in first char with ('B')
fails:Array#pack uses zeros if count is not multiple of 8 with ('B')
fails:Array#pack returns zero-char for each 2 of count that greater than string length with ('B')
fails:Array#pack returns extra zero char if count is odd and greater than string length with ('B')
fails:Array#pack starts new char if string is ended before char's 8 bits with ('B')
fails:Array#pack considers count = 1 if no explicit count it given with ('B')
fails:Array#pack returns empty string if count = 0 with ('B')
fails:Array#pack uses argument string length as count if count = * with ('B')
fails:Array#pack consumes only one array item with ('B')
fails:Array#pack raises a TypeError if corresponding array item is not String with ('B')
fails:Array#pack returns packed bit-string descending order with ('b')
fails:Array#pack conversion edge case: all zeros with ('b')
fails:Array#pack conversion edge case: all ones with ('b')
fails:Array#pack conversion edge case: left one with ('b')
fails:Array#pack conversion edge case: right one with ('b')
fails:Array#pack conversion edge case: edge sequences not in first char with ('b')
fails:Array#pack uses char codes to determine if bit is set or not with ('b')
fails:Array#pack uses zeros if count is not multiple of 8 with ('b')
fails:Array#pack returns zero-char for each 2 of count that greater than string length with ('b')
fails:Array#pack returns extra zero char if count is odd and greater than string length with ('b')
fails:Array#pack starts new char if argument string is ended before char's 8 bits with ('b')
fails:Array#pack considers count = 1 if no explicit count it given with ('b')
fails:Array#pack returns empty string if count = 0 with ('b')
fails:Array#pack uses argument string length as count if count = * with ('b')
fails:Array#pack consumes only one array item with ('b')
fails:Array#pack raises a TypeError if corresponding array item is not String with ('b')
fails:Array#pack raises an ArgumentError if count is greater than array elements left with ('C')
fails:Array#pack raises an ArgumentError if count is greater than array elements left with ('c')
fails:Array#pack encodes a high-nibble hexadecimal string with ('H')
fails:Array#pack encodes a low-nibble hexadecimal string with ('h')
fails:Array#pack enocdes string with Qouted Printable encoding with ('M')
fails:Array#pack doesn't encode new line chars with ('M')
fails:Array#pack always appends soft line break at the end of encoded string with ('M')
fails:Array#pack appends soft line break after each 72 chars + 1 encoded char in encoded string with ('M')
fails:Array#pack doesn't quote chars 32..60 and 62..126) with ('M')
fails:Array#pack quotes chars by adding equal sign and char's hex value with ('M')
fails:Array#pack quotes equal sign with ('M')
fails:Array#pack doesn't quote \t char with ('M')
fails:Array#pack returns empty string if source string is empty with ('M')
fails:Array#pack calls to_s on object to convert to string with ('M')
fails:Array#pack ignores count parameter with ('M')
fails:Array#pack ignores star parameter with ('M')
fails:Array#pack encodes 4 integers in network order with ('n4')
fails:Array#pack converts integers into UTF-8 encoded byte sequences with ('U')
fails:Array#pack encodes string with UU-encoding with ('u')
fails:Array#pack converts series of 3-char sequences into four 4-char sequences with ('u')
fails:Array#pack appends zero-chars to source string if string length is not multiple of 3 with ('u')
fails:Array#pack appends newline at the end of result string with ('u')
fails:Array#pack splits source string into lines with no more than 45 chars with ('u')
fails:Array#pack prepends encoded line length to each line with ('u')
fails:Array#pack encodes 6-bit char with another char starting from char 32 with ('u')
fails:Array#pack replaces spaces in encoded string with grave accent (`) char with ('u')
fails:Array#pack returns empty string if source string is empty with ('u')
fails:Array#pack raises a TypeError if corresponding array item is not string with ('u')
fails:Array#pack ignores count parameter with ('u')
fails:Array#pack ignores star parameter with ('u')
fails:Array#pack decreases result string by one char with ('X')
fails:Array#pack converts to BER-compressed integer with ('w')
fails:Array#pack with count decreases result string by count chars with ('X')
fails:Array#pack raises an ArgumentError if count greater than already generated string length with ('X')
fails:Array#pack reuses last array element as often as needed to complete the string
